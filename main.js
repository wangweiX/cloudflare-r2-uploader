/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/core/main.ts
var import_obsidian8 = require("obsidian");

// src/models/settings.ts
var DEFAULT_SETTINGS = {
  storageProvider: "cloudflare_images" /* CLOUDFLARE_IMAGES */,
  accountId: "",
  apiToken: "",
  r2Settings: {
    accountId: "",
    apiToken: "",
    bucket: ""
  },
  enableAutoPaste: false
};

// src/services/storage-service.ts
var StorageService = class _StorageService {
  constructor(app) {
    this.app = app;
  }
  /**
   * 获取存储服务的实例
   */
  static getInstance(app) {
    if (!_StorageService.instance) {
      _StorageService.instance = new _StorageService(app);
    }
    return _StorageService.instance;
  }
};

// src/services/cloudflare-service.ts
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var CloudflareImagesService = class {
  /**
   * 构造函数
   */
  constructor(settings) {
    this.settings = settings;
  }
  /**
   * 获取提供者类型
   */
  getType() {
    return "cloudflare_images" /* CLOUDFLARE_IMAGES */;
  }
  /**
   * 上传图片到Cloudflare
   */
  async uploadFile(filePath, fileContent) {
    return this.uploadImage(filePath, fileContent);
  }
  /**
   * 上传图片到Cloudflare (兼容原有方法)
   */
  async uploadImage(imagePath, fileContent) {
    try {
      const { accountId, apiToken } = this.settings;
      const fileName = path.basename(imagePath);
      const url = `https://api.cloudflare.com/client/v4/accounts/${accountId}/images/v1`;
      const formData = new FormData();
      const blob = new Blob([fileContent], { type: "application/octet-stream" });
      formData.append("file", blob, fileName);
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${apiToken}`
        },
        body: formData
      });
      const json = await response.json();
      if (json.success && json.result) {
        return {
          success: true,
          localPath: imagePath,
          imageId: json.result.id
        };
      } else {
        const errorMessage = json.errors?.[0]?.message || "\u672A\u77E5\u9519\u8BEF";
        console.error(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25 ${imagePath}: ${errorMessage}`);
        new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${fileName}`, 3e3);
        return {
          success: false,
          localPath: imagePath,
          error: errorMessage
        };
      }
    } catch (error) {
      console.error(`\u5904\u7406\u56FE\u7247\u65F6\u51FA\u9519 ${imagePath}:`, error);
      new import_obsidian.Notice(`\u5904\u7406\u56FE\u7247\u51FA\u9519: ${path.basename(imagePath)}`, 3e3);
      return {
        success: false,
        localPath: imagePath,
        error: error.message
      };
    }
  }
  /**
   * 获取Cloudflare图片的URL
   */
  getFileUrl(imageId) {
    return this.getImageUrl(imageId);
  }
  /**
   * 获取Cloudflare图片的URL (兼容原有方法)
   */
  getImageUrl(imageId) {
    return `https://${this.settings.accountId}.imagedelivery.net/${imageId}`;
  }
};

// src/services/r2-service.ts
var import_obsidian3 = require("obsidian");
var path2 = __toESM(require("path"));

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    if (typeof crypto === "undefined" || !crypto.getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    getRandomValues = crypto.getRandomValues.bind(crypto);
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = { randomUUID };

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random ?? options.rng?.() ?? rng();
  if (rnds.length < 16) {
    throw new Error("Random bytes length must be >= 16");
  }
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    if (offset < 0 || offset + 16 > buf.length) {
      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/utils/logger.ts
var import_obsidian2 = require("obsidian");
var Logger = class _Logger {
  /**
   * 私有构造函数，防止直接实例化
   */
  constructor() {
    this.logLevel = 1 /* INFO */;
  }
  /**
   * 获取日志实例
   */
  static getInstance() {
    if (!_Logger.instance) {
      _Logger.instance = new _Logger();
    }
    return _Logger.instance;
  }
  /**
   * 设置日志级别
   */
  setLogLevel(level) {
    this.logLevel = level;
  }
  /**
   * 调试日志
   */
  debug(message, ...args) {
    if (this.logLevel <= 0 /* DEBUG */) {
      console.debug(`[DEBUG] ${message}`, ...args);
    }
  }
  /**
   * 信息日志
   */
  info(message, ...args) {
    if (this.logLevel <= 1 /* INFO */) {
      console.info(`[INFO] ${message}`, ...args);
    }
  }
  /**
   * 警告日志
   */
  warn(message, ...args) {
    if (this.logLevel <= 2 /* WARN */) {
      console.warn(`[WARN] ${message}`, ...args);
    }
  }
  /**
   * 错误日志
   */
  error(message, ...args) {
    if (this.logLevel <= 3 /* ERROR */) {
      console.error(`[ERROR] ${message}`, ...args);
    }
  }
  /**
   * 向用户显示通知
   */
  notify(message, timeout = 3e3) {
    new import_obsidian2.Notice(message, timeout);
  }
};

// src/services/r2-service.ts
var R2Service = class {
  /**
   * 构造函数
   */
  constructor(config) {
    this.config = config;
    this.logger = Logger.getInstance();
  }
  /**
   * 获取提供者类型
   */
  getType() {
    return "cloudflare_r2" /* CLOUDFLARE_R2 */;
  }
  /**
   * 上传文件到R2存储桶
   */
  async uploadFile(filePath, fileContent) {
    try {
      const { accountId, apiToken, bucket } = this.config;
      const fileName = path2.basename(filePath);
      const fileExt = path2.extname(fileName);
      const uniqueId = v4_default();
      const objectKey = `images/${uniqueId}${fileExt}`;
      const url = `https://api.cloudflare.com/client/v4/accounts/${accountId}/r2/buckets/${bucket}/objects/${objectKey}`;
      const blob = new Blob([fileContent]);
      const response = await fetch(url, {
        method: "PUT",
        headers: {
          "Authorization": `Bearer ${apiToken}`,
          "Content-Type": this.getMimeType(fileExt)
        },
        body: blob
      });
      if (response.ok) {
        this.logger.info(`\u6587\u4EF6\u4E0A\u4F20\u5230R2\u6210\u529F: ${fileName} -> ${objectKey}`);
        return {
          success: true,
          localPath: filePath,
          imageId: objectKey
        };
      } else {
        const errorText = await response.text();
        this.logger.error(`\u4E0A\u4F20\u5230R2\u5931\u8D25 ${filePath}: ${response.status} ${errorText}`);
        new import_obsidian3.Notice(`\u4E0A\u4F20\u6587\u4EF6\u5931\u8D25: ${fileName}`, 3e3);
        return {
          success: false,
          localPath: filePath,
          error: `HTTP Error ${response.status}: ${errorText}`
        };
      }
    } catch (error) {
      this.logger.error(`\u5904\u7406\u6587\u4EF6\u65F6\u51FA\u9519 ${filePath}:`, error);
      new import_obsidian3.Notice(`\u5904\u7406\u6587\u4EF6\u51FA\u9519: ${path2.basename(filePath)}`, 3e3);
      return {
        success: false,
        localPath: filePath,
        error: error.message
      };
    }
  }
  /**
   * 获取R2文件的URL
   */
  getFileUrl(objectKey) {
    const { accountId, bucket, customDomain } = this.config;
    if (customDomain) {
      return `${customDomain}/${objectKey}`;
    }
    return `https://${bucket}.${accountId}.r2.cloudflarestorage.com/${objectKey}`;
  }
  /**
   * 根据文件扩展名获取MIME类型
   */
  getMimeType(ext) {
    const mimeMap = {
      ".png": "image/png",
      ".jpg": "image/jpeg",
      ".jpeg": "image/jpeg",
      ".gif": "image/gif",
      ".webp": "image/webp",
      ".bmp": "image/bmp",
      ".svg": "image/svg+xml",
      ".pdf": "application/pdf",
      ".md": "text/markdown"
    };
    return mimeMap[ext.toLowerCase()] || "application/octet-stream";
  }
};

// src/services/image-service.ts
var import_obsidian4 = require("obsidian");
var path3 = __toESM(require("path"));
var ImageService = class {
  /**
   * 构造函数
   */
  constructor(app, storageProvider) {
    this.app = app;
    this.storageProvider = storageProvider;
    this.retryConfig = {
      maxRetries: 3,
      delayMs: 1e3
    };
    this.logger = Logger.getInstance();
  }
  /**
   * 解析图片路径
   */
  resolveAbsolutePath(notePath, imagePath) {
    if (imagePath.startsWith("/")) {
      return imagePath.substring(1);
    } else {
      const noteDir = path3.dirname(notePath);
      return path3.join(noteDir, imagePath);
    }
  }
  /**
   * 生成唯一文件名
   * 使用UUID生成唯一名称，比时间戳更可靠
   */
  generateUniqueFileName(originalPath) {
    const extension = path3.extname(originalPath);
    const baseName = path3.basename(originalPath, extension);
    return `${baseName}-${v4_default()}${extension}`;
  }
  /**
   * 延迟函数 - 用于重试间隔
   */
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  /**
   * 带重试机制的上传单个图片
   */
  async uploadImageWithRetry(imagePath, fileContent, retryCount = 0) {
    try {
      const uniqueFileName = this.generateUniqueFileName(imagePath);
      const result = await this.storageProvider.uploadFile(uniqueFileName, fileContent);
      if (result.success && result.imageId) {
        const imageUrl = this.storageProvider.getFileUrl(result.imageId);
        return { success: true, imageUrl };
      } else {
        if (retryCount >= this.retryConfig.maxRetries) {
          this.logger.warn(`\u56FE\u7247\u4E0A\u4F20\u5931\u8D25\uFF0C\u5DF2\u8FBE\u5230\u6700\u5927\u91CD\u8BD5\u6B21\u6570: ${imagePath}`);
          return { success: false };
        }
        this.logger.info(`\u56FE\u7247\u4E0A\u4F20\u5931\u8D25\uFF0C\u5C06\u8FDB\u884C\u7B2C ${retryCount + 1} \u6B21\u91CD\u8BD5: ${imagePath}`);
        await this.delay(this.retryConfig.delayMs);
        return this.uploadImageWithRetry(imagePath, fileContent, retryCount + 1);
      }
    } catch (error) {
      if (retryCount >= this.retryConfig.maxRetries) {
        this.logger.error(`\u56FE\u7247\u4E0A\u4F20\u51FA\u9519\uFF0C\u5DF2\u8FBE\u5230\u6700\u5927\u91CD\u8BD5\u6B21\u6570: ${imagePath}`, error);
        return { success: false };
      }
      this.logger.info(`\u56FE\u7247\u4E0A\u4F20\u51FA\u9519\uFF0C\u5C06\u8FDB\u884C\u7B2C ${retryCount + 1} \u6B21\u91CD\u8BD5: ${imagePath}`);
      await this.delay(this.retryConfig.delayMs);
      return this.uploadImageWithRetry(imagePath, fileContent, retryCount + 1);
    }
  }
  /**
   * 查找笔记中的图片
   */
  async findImagesToUpload() {
    const markdownFiles = this.app.vault.getMarkdownFiles();
    const imagePathsToUpload = /* @__PURE__ */ new Set();
    for (const file of markdownFiles) {
      const content = await this.app.vault.cachedRead(file);
      const regex = /!\[([^\]]*)\]\(([^)]*)\)/g;
      let match;
      while ((match = regex.exec(content)) !== null) {
        const imagePath = match[2];
        if (imagePath.startsWith("http://") || imagePath.startsWith("https://")) {
          continue;
        }
        const absolutePath = this.resolveAbsolutePath(file.path, imagePath);
        if (await this.app.vault.adapter.exists(absolutePath)) {
          imagePathsToUpload.add(absolutePath);
        } else {
          this.logger.warn(`\u56FE\u7247\u6587\u4EF6\u4E0D\u5B58\u5728\uFF1A${absolutePath}`);
        }
      }
    }
    return imagePathsToUpload;
  }
  /**
   * 上传图片到存储服务
   */
  async uploadImages(paths) {
    if (paths.length === 0) {
      return {};
    }
    const uploadResults = {};
    let successCount = 0;
    let failCount = 0;
    let currentIndex = 0;
    const totalImages = paths.length;
    const updateProgress = () => {
      const percentage = Math.round(currentIndex / totalImages * 100);
      new import_obsidian4.Notice(`\u4E0A\u4F20\u8FDB\u5EA6: ${percentage}% (${currentIndex}/${totalImages})`, 1e3);
    };
    updateProgress();
    for (const imagePath of paths) {
      try {
        currentIndex++;
        const fileContent = await this.app.vault.adapter.readBinary(imagePath);
        const result = await this.uploadImageWithRetry(imagePath, fileContent);
        if (result.success && result.imageUrl) {
          uploadResults[imagePath] = result.imageUrl;
          successCount++;
        } else {
          failCount++;
        }
        if (currentIndex % Math.max(1, Math.floor(totalImages / 10)) === 0 || currentIndex === totalImages) {
          updateProgress();
        }
      } catch (error) {
        this.logger.error(`\u5904\u7406\u56FE\u7247\u65F6\u51FA\u9519 ${imagePath}:`, error);
        new import_obsidian4.Notice(`\u5904\u7406\u56FE\u7247\u51FA\u9519: ${path3.basename(imagePath)}`, 3e3);
        failCount++;
        currentIndex++;
      }
    }
    if (successCount > 0) {
      new import_obsidian4.Notice(`\u6210\u529F\u4E0A\u4F20 ${successCount} \u5F20\u56FE\u7247`, 3e3);
    }
    if (failCount > 0) {
      new import_obsidian4.Notice(`\u6709 ${failCount} \u5F20\u56FE\u7247\u4E0A\u4F20\u5931\u8D25`, 3e3);
    }
    return uploadResults;
  }
  /**
   * 更新笔记中的图片链接
   */
  async updateNotes(uploadResults) {
    const markdownFiles = this.app.vault.getMarkdownFiles();
    let updatedCount = 0;
    for (const file of markdownFiles) {
      let content = await this.app.vault.cachedRead(file);
      let modified = false;
      const regex = /!\[([^\]]*)\]\(([^)]*)\)/g;
      let match;
      let lastIndex = 0;
      let newContent = "";
      while ((match = regex.exec(content)) !== null) {
        const fullMatch = match[0];
        const altText = match[1];
        const imagePath = match[2];
        if (imagePath.startsWith("http://") || imagePath.startsWith("https://")) {
          continue;
        }
        const absolutePath = this.resolveAbsolutePath(file.path, imagePath);
        if (uploadResults[absolutePath]) {
          const newImageUrl = uploadResults[absolutePath];
          newContent += content.substring(lastIndex, match.index);
          newContent += `![${altText}](${newImageUrl})`;
          lastIndex = match.index + fullMatch.length;
          modified = true;
        }
      }
      if (modified) {
        newContent += content.substring(lastIndex);
        await this.app.vault.modify(file, newContent);
        updatedCount++;
      }
    }
    if (updatedCount > 0) {
      new import_obsidian4.Notice(`\u5DF2\u66F4\u65B0 ${updatedCount} \u4E2A\u7B14\u8BB0\u6587\u4EF6`, 3e3);
    }
  }
};

// src/services/paste-handler.ts
var import_obsidian5 = require("obsidian");
var PasteHandler = class {
  /**
   * 构造函数
   */
  constructor(app, storageProvider, plugin) {
    this.app = app;
    this.storageProvider = storageProvider;
    this.plugin = plugin;
    this.eventRefs = [];
    this.logger = Logger.getInstance();
    this.handlePasteEvent = this.handlePasteEvent.bind(this);
  }
  /**
   * 注册粘贴事件处理
   */
  registerPasteEvent() {
    this.unregisterPasteEvent();
    try {
      const handler = this.handlePasteEvent;
      const eventName = "editor-paste";
      const eventRef = this.app.workspace.on(eventName, handler);
      this.plugin.registerEvent(eventRef);
      this.eventRefs.push(eventRef);
      this.logger.info("\u5DF2\u6CE8\u518C\u7C98\u8D34\u4E8B\u4EF6\u5904\u7406");
    } catch (error) {
      this.logger.error("\u6CE8\u518C\u7C98\u8D34\u4E8B\u4EF6\u5931\u8D25", error);
    }
  }
  /**
   * 取消注册粘贴事件
   */
  unregisterPasteEvent() {
    this.eventRefs.forEach((ref) => {
      if (ref) {
        this.app.workspace.offref(ref);
      }
    });
    this.eventRefs = [];
    this.logger.info("\u5DF2\u53D6\u6D88\u6CE8\u518C\u7C98\u8D34\u4E8B\u4EF6");
  }
  /**
   * 处理粘贴事件
   */
  async handlePasteEvent(evt, editor, view) {
    if (!evt.clipboardData || !evt.clipboardData.items) {
      return;
    }
    const items = evt.clipboardData.items;
    let hasImages = false;
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      if (!item.type.startsWith("image/")) {
        continue;
      }
      hasImages = true;
      const file = item.getAsFile();
      if (!file) {
        continue;
      }
      await this.processImageUpload(file, editor, evt, item.type);
    }
    if (hasImages) {
      evt.preventDefault();
    }
  }
  /**
   * 处理图片上传
   */
  async processImageUpload(file, editor, evt, mimeType) {
    try {
      this.logger.info("\u5F00\u59CB\u4E0A\u4F20\u7C98\u8D34\u7684\u56FE\u7247...");
      new import_obsidian5.Notice("\u6B63\u5728\u4E0A\u4F20\u56FE\u7247...", 2e3);
      const ext = this.getExtensionFromMime(mimeType);
      const filename = `pasted-image-${v4_default()}${ext}`;
      const arrayBuffer = await file.arrayBuffer();
      const placeholder = `![\u4E0A\u4F20\u4E2D...](${filename})`;
      const cursor = editor.getCursor();
      editor.replaceSelection(placeholder);
      const result = await this.storageProvider.uploadFile(filename, arrayBuffer);
      if (result.success && result.imageId) {
        const imageUrl = this.storageProvider.getFileUrl(result.imageId);
        const markdownText = `![${file.name || "\u56FE\u7247"}](${imageUrl})`;
        const content = editor.getValue();
        const newContent = content.replace(placeholder, markdownText);
        editor.setValue(newContent);
        editor.setCursor(cursor);
        this.logger.info(`\u7C98\u8D34\u56FE\u7247\u4E0A\u4F20\u6210\u529F: ${filename}`);
        new import_obsidian5.Notice("\u56FE\u7247\u4E0A\u4F20\u6210\u529F!", 2e3);
      } else {
        this.logger.error(`\u7C98\u8D34\u56FE\u7247\u4E0A\u4F20\u5931\u8D25: ${filename}`, result.error);
        new import_obsidian5.Notice(`\u56FE\u7247\u4E0A\u4F20\u5931\u8D25: ${result.error}`, 5e3);
      }
    } catch (error) {
      this.logger.error("\u5904\u7406\u7C98\u8D34\u56FE\u7247\u65F6\u51FA\u9519", error);
      new import_obsidian5.Notice("\u5904\u7406\u7C98\u8D34\u56FE\u7247\u65F6\u51FA\u9519: " + error.message, 5e3);
    }
  }
  /**
   * 从MIME类型获取文件扩展名
   */
  getExtensionFromMime(mime) {
    const mimeMap = {
      "image/png": ".png",
      "image/jpeg": ".jpg",
      "image/jpg": ".jpg",
      "image/gif": ".gif",
      "image/webp": ".webp",
      "image/bmp": ".bmp",
      "image/svg+xml": ".svg"
    };
    return mimeMap[mime] || ".png";
  }
};

// src/services/current-file-uploader.ts
var import_obsidian6 = require("obsidian");
var path4 = __toESM(require("path"));
var CurrentFileUploader = class {
  /**
   * 构造函数
   */
  constructor(app, storageProvider, mapping = {}) {
    this.app = app;
    this.storageProvider = storageProvider;
    this.mapping = mapping;
    this.retryConfig = {
      maxRetries: 3,
      delayMs: 1e3
    };
    this.logger = Logger.getInstance();
  }
  /**
   * 生成唯一文件名
   * 使用UUID生成唯一名称，比时间戳更可靠
   */
  generateUniqueFileName(originalPath) {
    const extension = path4.extname(originalPath);
    const baseName = path4.basename(originalPath, extension);
    return `${baseName}-${v4_default()}${extension}`;
  }
  /**
   * 处理当前活动文件中的图片
   * @returns 处理结果，包含图片总数、成功数、失败数和新的映射记录
   */
  async processCurrentFile() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || activeFile.extension !== "md") {
      new import_obsidian6.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A Markdown \u7B14\u8BB0\u6587\u4EF6", 3e3);
      return null;
    }
    try {
      this.logger.info(`\u5F00\u59CB\u5904\u7406\u5F53\u524D\u7B14\u8BB0\u6587\u4EF6\uFF1A${activeFile.path}`);
      new import_obsidian6.Notice(`\u5F00\u59CB\u5904\u7406\u7B14\u8BB0\u6587\u4EF6\uFF1A${activeFile.basename}`, 2e3);
      const imagesToUpload = await this.findImagesInFile(activeFile);
      if (imagesToUpload.size === 0) {
        this.logger.info("\u5F53\u524D\u7B14\u8BB0\u4E2D\u6CA1\u6709\u9700\u8981\u4E0A\u4F20\u7684\u56FE\u7247");
        new import_obsidian6.Notice("\u5F53\u524D\u7B14\u8BB0\u4E2D\u6CA1\u6709\u627E\u5230\u9700\u8981\u4E0A\u4F20\u7684\u56FE\u7247", 3e3);
        return {
          totalImages: 0,
          successCount: 0,
          failureCount: 0,
          newMappings: {}
        };
      }
      this.logger.info(`\u627E\u5230 ${imagesToUpload.size} \u5F20\u56FE\u7247\u9700\u8981\u4E0A\u4F20`);
      new import_obsidian6.Notice(`\u627E\u5230 ${imagesToUpload.size} \u5F20\u56FE\u7247\u9700\u8981\u4E0A\u4F20`, 2e3);
      const { newMappings, successCount, failCount } = await this.uploadImages(Array.from(imagesToUpload));
      await this.updateFileLinks(activeFile, newMappings);
      this.logger.info("\u5F53\u524D\u7B14\u8BB0\u56FE\u7247\u5904\u7406\u5B8C\u6210");
      return {
        totalImages: imagesToUpload.size,
        successCount,
        failureCount: failCount,
        newMappings
      };
    } catch (error) {
      this.logger.error("\u5904\u7406\u5F53\u524D\u7B14\u8BB0\u56FE\u7247\u65F6\u51FA\u9519", error);
      new import_obsidian6.Notice(`\u5904\u7406\u56FE\u7247\u65F6\u51FA\u9519: ${error.message}`, 5e3);
      return null;
    }
  }
  /**
   * 在文件中查找需要上传的图片
   */
  async findImagesInFile(file) {
    const imagePathsToUpload = /* @__PURE__ */ new Set();
    const content = await this.app.vault.cachedRead(file);
    const regex = /!\[([^\]]*)\]\(([^)]*)\)/g;
    let match;
    while ((match = regex.exec(content)) !== null) {
      const imagePath = match[2];
      if (imagePath.startsWith("http://") || imagePath.startsWith("https://")) {
        continue;
      }
      const absolutePath = this.resolveAbsolutePath(file.path, imagePath);
      if (!this.mapping[absolutePath]) {
        if (await this.app.vault.adapter.exists(absolutePath)) {
          imagePathsToUpload.add(absolutePath);
        } else {
          this.logger.warn(`\u56FE\u7247\u6587\u4EF6\u4E0D\u5B58\u5728\uFF1A${absolutePath}`);
        }
      }
    }
    return imagePathsToUpload;
  }
  /**
   * 解析图片绝对路径
   */
  resolveAbsolutePath(notePath, imagePath) {
    if (imagePath.startsWith("/")) {
      return imagePath.substring(1);
    } else {
      const noteDir = path4.dirname(notePath);
      return path4.join(noteDir, imagePath);
    }
  }
  /**
   * 延迟函数 - 用于重试间隔
   */
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  /**
   * 带重试机制的上传单个图片
   */
  async uploadImageWithRetry(imagePath, fileContent, retryCount = 0) {
    try {
      const uniqueFileName = this.generateUniqueFileName(imagePath);
      const result = await this.storageProvider.uploadFile(uniqueFileName, fileContent);
      if (result.success && result.imageId) {
        const imageUrl = this.storageProvider.getFileUrl(result.imageId);
        return { success: true, imageUrl };
      } else {
        if (retryCount >= this.retryConfig.maxRetries) {
          this.logger.warn(`\u56FE\u7247\u4E0A\u4F20\u5931\u8D25\uFF0C\u5DF2\u8FBE\u5230\u6700\u5927\u91CD\u8BD5\u6B21\u6570: ${imagePath}`);
          return { success: false };
        }
        this.logger.info(`\u56FE\u7247\u4E0A\u4F20\u5931\u8D25\uFF0C\u5C06\u8FDB\u884C\u7B2C ${retryCount + 1} \u6B21\u91CD\u8BD5: ${imagePath}`);
        await this.delay(this.retryConfig.delayMs);
        return this.uploadImageWithRetry(imagePath, fileContent, retryCount + 1);
      }
    } catch (error) {
      if (retryCount >= this.retryConfig.maxRetries) {
        this.logger.error(`\u56FE\u7247\u4E0A\u4F20\u51FA\u9519\uFF0C\u5DF2\u8FBE\u5230\u6700\u5927\u91CD\u8BD5\u6B21\u6570: ${imagePath}`, error);
        return { success: false };
      }
      this.logger.info(`\u56FE\u7247\u4E0A\u4F20\u51FA\u9519\uFF0C\u5C06\u8FDB\u884C\u7B2C ${retryCount + 1} \u6B21\u91CD\u8BD5: ${imagePath}`);
      await this.delay(this.retryConfig.delayMs);
      return this.uploadImageWithRetry(imagePath, fileContent, retryCount + 1);
    }
  }
  /**
   * 上传图片到存储服务
   */
  async uploadImages(paths) {
    if (paths.length === 0) {
      return { newMappings: {}, successCount: 0, failCount: 0 };
    }
    const newMappings = {};
    let successCount = 0;
    let failCount = 0;
    let currentIndex = 0;
    const totalImages = paths.length;
    const updateProgress = () => {
      const percentage = Math.round(currentIndex / totalImages * 100);
      new import_obsidian6.Notice(`\u4E0A\u4F20\u8FDB\u5EA6: ${percentage}% (${currentIndex}/${totalImages})`, 1e3);
    };
    updateProgress();
    for (const imagePath of paths) {
      try {
        currentIndex++;
        const fileContent = await this.app.vault.adapter.readBinary(imagePath);
        const result = await this.uploadImageWithRetry(imagePath, fileContent);
        if (result.success && result.imageUrl) {
          newMappings[imagePath] = result.imageUrl;
          successCount++;
        } else {
          failCount++;
        }
        if (currentIndex % Math.max(1, Math.floor(totalImages / 10)) === 0 || currentIndex === totalImages) {
          updateProgress();
        }
      } catch (error) {
        this.logger.error(`\u5904\u7406\u56FE\u7247\u65F6\u51FA\u9519 ${imagePath}:`, error);
        new import_obsidian6.Notice(`\u5904\u7406\u56FE\u7247\u51FA\u9519: ${path4.basename(imagePath)}`, 3e3);
        failCount++;
        currentIndex++;
      }
    }
    if (successCount > 0) {
      new import_obsidian6.Notice(`\u6210\u529F\u4E0A\u4F20 ${successCount} \u5F20\u56FE\u7247`, 3e3);
    }
    if (failCount > 0) {
      new import_obsidian6.Notice(`\u6709 ${failCount} \u5F20\u56FE\u7247\u4E0A\u4F20\u5931\u8D25`, 3e3);
    }
    return { newMappings, successCount, failCount };
  }
  /**
   * 更新当前文件中的图片链接
   */
  async updateFileLinks(file, uploadResults) {
    const content = await this.app.vault.cachedRead(file);
    let modified = false;
    const regex = /!\[([^\]]*)\]\(([^)]*)\)/g;
    let match;
    let lastIndex = 0;
    let newContent = "";
    while ((match = regex.exec(content)) !== null) {
      const fullMatch = match[0];
      const altText = match[1];
      const imagePath = match[2];
      if (imagePath.startsWith("http://") || imagePath.startsWith("https://")) {
        continue;
      }
      const absolutePath = this.resolveAbsolutePath(file.path, imagePath);
      const newImageUrl = uploadResults[absolutePath] || (this.mapping[absolutePath] ? this.storageProvider.getFileUrl(this.mapping[absolutePath]) : null);
      if (newImageUrl) {
        newContent += content.substring(lastIndex, match.index);
        newContent += `![${altText}](${newImageUrl})`;
        lastIndex = match.index + fullMatch.length;
        modified = true;
      }
    }
    if (modified) {
      newContent += content.substring(lastIndex);
      await this.app.vault.modify(file, newContent);
    }
  }
};

// src/ui/settings-tab.ts
var import_obsidian7 = require("obsidian");
var SettingsTab = class extends import_obsidian7.PluginSettingTab {
  /**
   * 构造函数
   */
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  /**
   * 显示设置界面
   */
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Cloudflare \u56FE\u7247\u4E0A\u4F20\u5668\u8BBE\u7F6E" });
    new import_obsidian7.Setting(containerEl).setName("\u5B58\u50A8\u63D0\u4F9B\u8005").setDesc("\u9009\u62E9\u8981\u4F7F\u7528\u7684\u56FE\u7247\u5B58\u50A8\u63D0\u4F9B\u8005").addDropdown((dropdown) => {
      dropdown.addOption("cloudflare_images" /* CLOUDFLARE_IMAGES */, "Cloudflare Images").addOption("cloudflare_r2" /* CLOUDFLARE_R2 */, "Cloudflare R2").setValue(this.plugin.settings.storageProvider).onChange(async (value) => {
        this.plugin.settings.storageProvider = value;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u542F\u7528\u81EA\u52A8\u7C98\u8D34\u4E0A\u4F20").setDesc("\u7C98\u8D34\u56FE\u7247\u65F6\u81EA\u52A8\u4E0A\u4F20\u5230Cloudflare\u5E76\u66FF\u6362\u4E3A\u94FE\u63A5").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableAutoPaste).onChange(async (value) => {
        this.plugin.settings.enableAutoPaste = value;
        await this.plugin.saveSettings();
      });
    });
    if (this.plugin.settings.storageProvider === "cloudflare_images" /* CLOUDFLARE_IMAGES */) {
      this.displayCloudflareImagesSettings(containerEl);
    } else if (this.plugin.settings.storageProvider === "cloudflare_r2" /* CLOUDFLARE_R2 */) {
      this.displayCloudflareR2Settings(containerEl);
    }
  }
  /**
   * 显示Cloudflare Images设置
   */
  displayCloudflareImagesSettings(containerEl) {
    containerEl.createEl("h3", { text: "Cloudflare Images \u914D\u7F6E" });
    new import_obsidian7.Setting(containerEl).setName("\u8D26\u6237 ID").setDesc("\u60A8\u7684 Cloudflare \u8D26\u6237 ID").addText(
      (text) => text.setPlaceholder("\u8F93\u5165\u60A8\u7684\u8D26\u6237 ID").setValue(this.plugin.settings.accountId).onChange(async (value) => {
        this.plugin.settings.accountId = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian7.Setting(containerEl).setName("API \u4EE4\u724C").setDesc("\u5177\u6709 Images \u6743\u9650\u7684 Cloudflare API \u4EE4\u724C").addText(
      (text) => text.setPlaceholder("\u8F93\u5165\u60A8\u7684 API \u4EE4\u724C").setValue(this.plugin.settings.apiToken).onChange(async (value) => {
        this.plugin.settings.apiToken = value;
        await this.plugin.saveSettings();
      })
    );
  }
  /**
   * 显示Cloudflare R2设置
   */
  displayCloudflareR2Settings(containerEl) {
    containerEl.createEl("h3", { text: "Cloudflare R2 \u914D\u7F6E" });
    new import_obsidian7.Setting(containerEl).setName("\u8D26\u6237 ID").setDesc("\u60A8\u7684 Cloudflare \u8D26\u6237 ID").addText(
      (text) => text.setPlaceholder("\u8F93\u5165\u60A8\u7684\u8D26\u6237 ID").setValue(this.plugin.settings.r2Settings.accountId).onChange(async (value) => {
        this.plugin.settings.r2Settings.accountId = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian7.Setting(containerEl).setName("API \u4EE4\u724C").setDesc("\u5177\u6709 R2 \u6743\u9650\u7684 Cloudflare API \u4EE4\u724C").addText(
      (text) => text.setPlaceholder("\u8F93\u5165\u60A8\u7684 API \u4EE4\u724C").setValue(this.plugin.settings.r2Settings.apiToken).onChange(async (value) => {
        this.plugin.settings.r2Settings.apiToken = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian7.Setting(containerEl).setName("\u5B58\u50A8\u6876\u540D\u79F0").setDesc("R2 \u5B58\u50A8\u6876\u7684\u540D\u79F0").addText(
      (text) => text.setPlaceholder("\u8F93\u5165\u5B58\u50A8\u6876\u540D\u79F0").setValue(this.plugin.settings.r2Settings.bucket).onChange(async (value) => {
        this.plugin.settings.r2Settings.bucket = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian7.Setting(containerEl).setName("\u81EA\u5B9A\u4E49\u57DF\u540D\uFF08\u53EF\u9009\uFF09").setDesc("\u8BBF\u95EE R2 \u5BF9\u8C61\u7684\u81EA\u5B9A\u4E49\u57DF\u540D\uFF0C\u5305\u62EC\u534F\u8BAE\u524D\u7F00\uFF08\u4F8B\u5982\uFF1Ahttps://images.example.com\uFF09").addText(
      (text) => text.setPlaceholder("https://images.example.com").setValue(this.plugin.settings.r2Settings.customDomain || "").onChange(async (value) => {
        this.plugin.settings.r2Settings.customDomain = value || void 0;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/core/main.ts
var UPLOAD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>`;
var CloudflareImagesUploader = class extends import_obsidian8.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.mapping = {};
  }
  /**
   * 插件加载
   */
  async onload() {
    this.logger = Logger.getInstance();
    this.logger.info("\u52A0\u8F7D Cloudflare Images Uploader \u63D2\u4EF6");
    await this.loadSettings();
    this.storageService = StorageService.getInstance(this.app);
    this.storageProvider = this.createStorageProvider();
    this.imageService = new ImageService(this.app, this.storageProvider);
    this.pasteHandler = new PasteHandler(this.app, this.storageProvider, this);
    this.currentFileUploader = new CurrentFileUploader(this.app, this.storageProvider, this.mapping);
    this.addSettingTab(new SettingsTab(this.app, this));
    this.addCommand({
      id: "upload-images-to-cloudflare",
      name: "\u4E0A\u4F20\u6240\u6709\u7B14\u8BB0\u4E2D\u7684\u56FE\u7247",
      callback: () => this.executeUpload()
    });
    this.addCommand({
      id: "upload-current-note-images",
      name: "\u4E0A\u4F20\u5F53\u524D\u7B14\u8BB0\u4E2D\u7684\u56FE\u7247",
      callback: () => this.uploadCurrentNoteImages()
    });
    (0, import_obsidian8.addIcon)("upload-images", UPLOAD_ICON);
    this.addRibbonIcon("upload-images", "\u4E0A\u4F20\u5F53\u524D\u7B14\u8BB0\u4E2D\u7684\u56FE\u7247", () => {
      this.uploadCurrentNoteImages();
    });
    if (this.settings.enableAutoPaste) {
      this.pasteHandler.registerPasteEvent();
      this.logger.info("\u5DF2\u542F\u7528\u81EA\u52A8\u7C98\u8D34\u4E0A\u4F20\u529F\u80FD");
    }
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        const currentProvider = this.createStorageProvider();
        if (currentProvider.getType() !== this.storageProvider.getType()) {
          this.storageProvider = currentProvider;
          this.imageService = new ImageService(this.app, this.storageProvider);
          this.currentFileUploader = new CurrentFileUploader(this.app, this.storageProvider, this.mapping);
        }
        if (this.settings.enableAutoPaste) {
          this.pasteHandler.registerPasteEvent();
          this.logger.info("\u5DF2\u542F\u7528\u81EA\u52A8\u7C98\u8D34\u4E0A\u4F20\u529F\u80FD");
        } else {
          this.pasteHandler.unregisterPasteEvent();
          this.logger.info("\u5DF2\u7981\u7528\u81EA\u52A8\u7C98\u8D34\u4E0A\u4F20\u529F\u80FD");
        }
      })
    );
  }
  /**
   * 插件卸载
   */
  async onunload() {
    this.logger.info("\u5378\u8F7D Cloudflare Images Uploader \u63D2\u4EF6");
    this.pasteHandler.unregisterPasteEvent();
  }
  /**
   * 加载设置
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  /**
   * 保存设置
   */
  async saveSettings() {
    await this.saveData(this.settings);
    this.handleSettingsChange();
  }
  /**
   * 处理设置变更
   */
  handleSettingsChange() {
    this.storageProvider = this.createStorageProvider();
    this.imageService = new ImageService(this.app, this.storageProvider);
    this.currentFileUploader = new CurrentFileUploader(this.app, this.storageProvider, this.mapping);
    if (this.settings.enableAutoPaste) {
      this.pasteHandler.registerPasteEvent();
      this.logger.info("\u5DF2\u542F\u7528\u81EA\u52A8\u7C98\u8D34\u4E0A\u4F20\u529F\u80FD");
    } else {
      this.pasteHandler.unregisterPasteEvent();
      this.logger.info("\u5DF2\u7981\u7528\u81EA\u52A8\u7C98\u8D34\u4E0A\u4F20\u529F\u80FD");
    }
  }
  /**
   * 创建存储提供者
   */
  createStorageProvider() {
    switch (this.settings.storageProvider) {
      case "cloudflare_images" /* CLOUDFLARE_IMAGES */:
        return new CloudflareImagesService(this.settings);
      case "cloudflare_r2" /* CLOUDFLARE_R2 */:
        return new R2Service(this.settings.r2Settings);
      default:
        this.logger.error(`\u672A\u77E5\u7684\u5B58\u50A8\u63D0\u4F9B\u8005\u7C7B\u578B: ${this.settings.storageProvider}`);
        return new CloudflareImagesService(this.settings);
    }
  }
  /**
   * 执行上传过程（所有笔记）
   */
  async executeUpload() {
    this.logger.info("\u5F00\u59CB\u6267\u884C\u4E0A\u4F20\u8FC7\u7A0B");
    if (!this.validateSettings()) {
      return;
    }
    try {
      const imagePathsToUpload = await this.imageService.findImagesToUpload();
      this.logger.info(`\u627E\u5230 ${imagePathsToUpload.size} \u5F20\u56FE\u7247\u9700\u8981\u4E0A\u4F20`);
      if (imagePathsToUpload.size === 0) {
        this.logger.notify("\u6CA1\u6709\u65B0\u7684\u56FE\u7247\u9700\u8981\u4E0A\u4F20", 3e3);
        return;
      }
      const newMappings = await this.imageService.uploadImages(Array.from(imagePathsToUpload));
      Object.assign(this.mapping, newMappings);
      this.imageService = new ImageService(this.app, this.storageProvider);
      await this.imageService.updateNotes(newMappings);
      this.logger.notify("\u56FE\u7247\u5904\u7406\u5B8C\u6210", 3e3);
    } catch (error) {
      this.logger.error("\u6267\u884C\u4E0A\u4F20\u8FC7\u7A0B\u65F6\u51FA\u9519", error);
      this.logger.notify("\u4E0A\u4F20\u8FC7\u7A0B\u4E2D\u51FA\u73B0\u9519\u8BEF\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u65E5\u5FD7\u3002", 5e3);
    }
  }
  /**
   * 上传当前笔记中的图片
   */
  async uploadCurrentNoteImages() {
    this.logger.info("\u5F00\u59CB\u4E0A\u4F20\u5F53\u524D\u7B14\u8BB0\u4E2D\u7684\u56FE\u7247");
    if (!this.validateSettings()) {
      return;
    }
    try {
      const result = await this.currentFileUploader.processCurrentFile();
      if (result) {
        if (result.totalImages > 0) {
          Object.assign(this.mapping, result.newMappings);
          this.logger.notify(`\u5904\u7406\u5B8C\u6210: \u6210\u529F\u4E0A\u4F20 ${result.successCount} \u5F20\u56FE\u7247, \u5931\u8D25 ${result.failureCount} \u5F20`, 3e3);
        } else {
          this.logger.notify("\u5F53\u524D\u7B14\u8BB0\u4E2D\u6CA1\u6709\u9700\u8981\u4E0A\u4F20\u7684\u56FE\u7247", 3e3);
        }
      }
    } catch (error) {
      this.logger.error("\u4E0A\u4F20\u5F53\u524D\u7B14\u8BB0\u56FE\u7247\u65F6\u51FA\u9519", error);
      this.logger.notify("\u4E0A\u4F20\u8FC7\u7A0B\u4E2D\u51FA\u73B0\u9519\u8BEF\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u65E5\u5FD7\u3002", 5e3);
    }
  }
  /**
   * 验证设置
   */
  validateSettings() {
    if (this.settings.storageProvider === "cloudflare_images" /* CLOUDFLARE_IMAGES */) {
      if (!this.settings.accountId || !this.settings.apiToken) {
        this.logger.notify("\u8BF7\u5148\u5728\u63D2\u4EF6\u8BBE\u7F6E\u4E2D\u8F93\u5165 Cloudflare \u8D26\u6237 ID \u548C API \u4EE4\u724C\u3002", 5e3);
        return false;
      }
    } else if (this.settings.storageProvider === "cloudflare_r2" /* CLOUDFLARE_R2 */) {
      const { accountId, apiToken, bucket } = this.settings.r2Settings;
      if (!accountId || !apiToken || !bucket) {
        this.logger.notify("\u8BF7\u5148\u5728\u63D2\u4EF6\u8BBE\u7F6E\u4E2D\u5B8C\u6210 Cloudflare R2 \u7684\u914D\u7F6E\u3002", 5e3);
        return false;
      }
    }
    return true;
  }
};

// src/index.ts
var src_default = CloudflareImagesUploader;

// main.ts
var main_default = src_default;
